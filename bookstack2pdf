#!/bin/sh


_bookstack2pdf_init() {
    # Don't do this in the globals. Do this first when we're running main().
    set -eu

    case ${LANG:-} in
    nl)
        LANG=nl-NL
        TEXT_CONFIDENTIAL=VERTROUWELIJK
        TEXT_TABLEOFCONTENTS=Inhoudsopgave
        ;;
    *)
        LANG=en-GB
        TEXT_CONFIDENTIAL=CONFIDENTIAL
        TEXT_TABLEOFCONTENTS='Table of Contents'
        ;;
    esac
}


make_style_css() {
    # This uses the fonts we found in the source.html we looked at.
    cat <<EOF
/*h1, h2, h3, h4, h5, body, p, li, div, span {*/
/* * {
    font-family: "DejaVu Sans", "Ubuntu", "Roboto", sans-serif;
    /* for some reason, the non-ToC font is significantly smalle ?? */
    font-size: 16px;
}*/
strong, em, a, b, i { margin: 0 0.1em 0 0.4em; } /* avoid "onderToegang" */
pre {
    font-family: "Lucida Console", "DejaVu Sans Mono", "Ubuntu Mono",
      Monaco, monospace;
}

/* Front page only */
#cover h1 { font-size: 40pt !important; font-weight: bold !important; }
#cover h2 { font-size: 30pt !important; font-weight: bold !important; color: #800; }
#cover h3 { font-size: 20pt !important; font-weight: bold !important; }
EOF
}


make_cover_html() {
    local title="$1"
    local subtitle="$2"
    local author="$3"
    local front_notes="$4"
    cat <<EOF
<!doctype html>
<html lang="$LANG">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>$title</title>
</head>
<body id="cover">
    <h1>$title</h1>
    <h2>$subtitle</h2>
    <h3>$author</h3>
    <pre>$front_notes</pre>
</body>
</html>
EOF
}


make_toc_xsl() {
    # Create custom XLS, not very much different from:
    #   wkhtmltopdf --dump-default-toc-xsl
    # But use XSLT to limit the depth.
    # An alternative is to use:
    #   <style>ul ul ul{ display: none; }</style>
    # But that is awkward to get the amount of ul's right..
    local maxdepth=1  # h1..h2

    # See also: --toc-header-text
    local toc_title="$TEXT_TABLEOFCONTENTS"

    cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.1"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:outline="http://wkhtmltopdf.org/outline"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns="http://www.w3.org/1999/xhtml">
  <xsl:output doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN"
              doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"
              indent="yes" />
  <xsl:template match="outline:outline">
    <html>
      <head>
        <title>$toc_title</title>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style>
          /*h1, h2, h3, h4, h5, body, p, li, div, span {*/
          * {
            font-family: "DejaVu Sans", "Ubuntu", "Roboto", sans-serif;
            /* this font is much larger than the body font?? */
            font-size: 16px;
          }
          h1 {
            text-align: center;
            font-size: 20pt;
          }
          /* See also: --disable-dotted-lines */
          div {border-bottom: 1px dashed rgb(200,200,200);margin-bottom:0.3em;}
          span {float: right;}
          li {list-style: none;}
          /*ul {
            font-family: arial;
          }*/
          /* See also: --toc-text-size-shrink */
          /*ul ul { font-size: 80%; }*/
          ul { padding-left: 0em; }
          /* See also: --toc-level-indentation */
          /*ul ul { padding-left: 1em;}*/
          a { text-decoration:none; color: black; }
          /* cannot get .depth[N] class matching to work?? */
          div { line-height: 1; }
          ul li div { margin-left: 0em; }
          ul li ul li div { margin-left: 2em; font-size: 80%; }
          ul li ul li ul li div { margin-left: 4em; font-size: 60%; }
        </style>
      </head>
      <body>
        <h1>$toc_title</h1>
        <!-- dive into the second outline:item and set depth=1 -->
        <ul>
          <xsl:apply-templates select="outline:item/outline:item">
            <xsl:with-param name="depth" select="1" as="xs:integer"/>
          </xsl:apply-templates>
        </ul>
      </body>
    </html>
  </xsl:template>
  <xsl:template match="outline:item">
    <xsl:param name="depth"/>
    <li>
      <xsl:attribute name="class">depth<xsl:value-of select="\$depth"/></xsl:attribute>
      <xsl:if test="@title!=''">
        <div>
          <a>
            <xsl:if test="@link">
              <xsl:attribute name="href"><xsl:value-of select="@link"/></xsl:attribute>
            </xsl:if>
            <xsl:if test="@backLink">
              <xsl:attribute name="name"><xsl:value-of select="@backLink"/></xsl:attribute>
            </xsl:if>
            <xsl:value-of select="@title" />
          </a>
          <span> <xsl:value-of select="@page" /> </span>
        </div>
      </xsl:if>
      <!-- limit ToC here to depth < N using lt because we haven't incremented yet -->
      <xsl:if test="\$depth &lt; $maxdepth">
        <ul>
          <xsl:comment>added to prevent self-closing tags in QtXmlPatterns</xsl:comment>
          <xsl:apply-templates select="outline:item">
            <xsl:with-param name="depth" select="\$depth + 1" as="xs:integer"/>
          </xsl:apply-templates>
        </ul>
      </xsl:if>
    </li>
  </xsl:template>
</xsl:stylesheet>
EOF
}


get_title() {
    # The heading looks like this:
    # <h1 style="font-size: 4.8em">The Heading</h1>
    sed -e '/<h1/!d;s@.*<h1[^>]*>@@;s@<.*@@' | head -n1
}


get_metadata() {
    # We have embedded metadata, like <version>..</version>.
    # However, this is HTML-encoded.
    local key="$1"
    sed -e "
        # From <key> to </key>
        /&lt;$key&gt;/,/&lt;\\/$key&gt;/!d

        # Remove leading and trailing and stop after </key>
        # (necessary for single-line data).
        s/.*&lt;$key&gt;//
        /&lt;\\/$key&gt;.*/{s/&lt;\\/$key&gt;.*//;q}
    "
}


get_first_page() {
    # The first page starts with <body> and then:
    # <div class="page-content">
    # ...
    # <div class="page-break"></div>
    sed -e '
        /<div class="page-content">/,/<div class="page-break">/!d
        /<div class="page-content">/d
        /<div class="page-break">/d
    '
}


get_without_first_page() {
    # The first page starts with <body> and then:
    # <div class="page-content">
    # ...
    # <div class="page-break"></div>
    # We want to cut out that, except the <div class="page-content">.
    sed -e '
        /<div class="page-content">/,/<div class="page-break">/d
        /<body/a<div class="page-content">
    '
}


_bookstack2pdf_main() {
    if test "${1:-}" = "-"; then
        SOURCE=$(cat)
    elif ! test -f "${1:-}"; then
       echo "Usage: $0 SOURCE.html OUTPUT.pdf -- source not found" >&2
        exit 1
    elif test "${1##*.}" != "html"; then
       echo "Usage: $0 SOURCE.html OUTPUT.pdf -- source not in html format" >&2
        exit 1
    else
        SOURCE=$(cat "$1")
    fi
    OUTPUT=${2:-}
    if test "${OUTPUT##*.}" != "pdf"; then
        echo "Usage: $0 SOURCE.html OUTPUT.pdf -- output should end in pdf" >&2
        exit 1
    fi
    if test -e "$OUTPUT"; then
        echo "Usage: $0 SOURCE.html OUTPUT.pdf -- output exists already" >&2
        exit 1
    fi

    local replace_toc=false

    FIRST_PAGE=$(printf '%s' "$SOURCE" | get_first_page)
    OTHER_PAGES=$(printf '%s' "$SOURCE" | get_without_first_page)

    TITLE=$(printf '%s' "$FIRST_PAGE" | get_title)
    AUTHOR=$(printf '%s' "$FIRST_PAGE" | get_metadata author)
    VERSION=$(printf '%s' "$FIRST_PAGE" | get_metadata version)
    FRONT_NOTES=$(printf '%s' "$FIRST_PAGE" | get_metadata front_notes)

    # Make temp file locations:
    TMPDIR=$(mktemp --tmpdir=$(dirname "$0") --directory)
    trap "rm -vr '$TMPDIR'" EXIT
    TMP_SOURCE="$TMPDIR/source.html"
    TMP_COVER="$TMPDIR/cover.html"
    TMP_STYLE="$TMPDIR/style.css"
    TMP_TOCXSL="$TMPDIR/toc.xsl"
    TMP_OUTPUT="$TMPDIR/output.pdf"

    # Write temp files:
    make_style_css >"$TMP_STYLE"
    make_cover_html "$TITLE" "$TEXT_CONFIDENTIAL" "$AUTHOR" "$FRONT_NOTES" \
        >"$TMP_COVER"

    local toc_args=
    if $replace_toc; then
        make_toc_xsl >"$TMP_TOCXSL"
        toc_args="toc --xsl-style-sheet $TMP_TOCXSL"
        printf '%s' "$OTHER_PAGES" >"$TMP_SOURCE"
    else
        printf '%s' "$OTHER_PAGES" | sed -e '1,/^<body/!d' >"$TMP_SOURCE"
        echo '<ul class="contents">' >>"$TMP_SOURCE"
        printf '%s' "$FIRST_PAGE" |
            sed -e '1,/<ul class="contents">/d' >>"$TMP_SOURCE"
        echo '<div class="page-break"></div>' >>"$TMP_SOURCE"
        printf '%s' "$OTHER_PAGES" >>"$TMP_SOURCE"
    fi

    # Get to actual work:
    # (--dpi affects underline dashes at least..)
    wkhtmltopdf \
        --title "$TITLE" \
        --page-size A4 \
        --dpi 96 \
        --disable-external-links \
        --disable-javascript \
        --user-style-sheet "$TMP_STYLE" \
        --header-font-name 'DejaVu Sans' \
        --header-font-size 8 \
        --footer-font-name 'DejaVu Sans' \
        --footer-font-size 8 \
        --footer-spacing 5 \
        --footer-left "$TEXT_CONFIDENTIAL - $TITLE - $VERSION - $AUTHOR" \
        --footer-right '[page]/[topage]' \
        cover "$TMP_COVER" \
        $toc_args \
        "$TMP_SOURCE" \
        "$TMP_OUTPUT"
    mv "$TMP_OUTPUT" "$OUTPUT"
}


# Allow others to include us. That way we can test/reuse bits.
case ${0##*/} in
sh|bash)
    # Just load the functions and quit.
    ;;
*)
    # I assume we're called bookstack2pdf, but maybe someone renamed us.
    _bookstack2pdf_init "$@"
    _bookstack2pdf_main "$@"
    ;;
esac
